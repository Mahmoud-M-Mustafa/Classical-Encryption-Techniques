# -*- coding: utf-8 -*-
"""CSE436-Security.ipynb

Automatically generated by Colaboratory.
@author: Mahmoud Mustafa



## Caesar cipher
"""

def caesar(plaintext,key):
  key=key%26 
  return "".join([ chr( (ord(ch)-97+key)%26+97)  for ch in plaintext.lower()])


"""## Hill Cipher

"""

import numpy as np
from math import ceil

def hill(plaintext,key_matrix):
  n= len(plaintext)
  plaintext.replace(" ","")
  key_matrix= np.array(key_matrix)
  dim = key_matrix.shape
  if dim[0] != dim[1]:
    return "error please input a valid matrix"
  if len(plaintext) % dim[0] !=0:
    plaintext+=('z'*(dim[0] - (len(plaintext) % dim[0]))) # append extra characters to make the matrix shaped well
  plntxt_matrix = np.array([ord(ch)-97 for ch in plaintext.lower()]).reshape(ceil(len(plaintext)/dim[0]),dim[0],1)
  result= np.zeros((ceil(len(plaintext)/dim[0]),dim[0],1))
  for i in range(len(result)):
    result[i]=np.matmul(key_matrix,plntxt_matrix[i])
  
  ciphertext=[]
  for i in result.flatten():
      ciphertext.append(chr(int(i%26)+97))

  
  return "".join(ciphertext[:n])


"""## Playfair cipher"""

#   5x5 matrix
# [ , , , , ]
# [ , , , , ]
# [ , , , , ]
# [ , , , , ]
# [ , , , , ]


def playfair(plaintext="mahmoud_mustafa",key="key"):

	plaintext=[c for c in plaintext]
	# ---preparing playfair 5x5 matrix (1)------
	x=[]
	for i in key:
		if i=='i' or i== 'j' and 'i/j' not in x :
			x.append("i/j")
		elif i !='i' and i != 'j' :
			x.append(i) if i not in x else None
	for i in range(97,123):
		if chr(i)=='i' or chr(i)== 'j' and 'i/j' not in x :
			x.append('i/j')
		elif chr(i)!='i' and chr(i)!= 'j':
			x.append(chr(i)) if chr(i) not in x else None


	x=np.reshape(x,(5,5))

	#--------------------End(1)--------------------


	# ------plaintext preprocessing (2) -----------
	for i in range(len(plaintext)-1):
		if plaintext[i] == plaintext[i+1]:
			plaintext.insert(i+1,'x')


	
	if len(plaintext)%2 !=0:
		plaintext.append('x')


	for i in range(len(plaintext)-1):
		if plaintext[i]=='i' or plaintext[i]=='j':
			plaintext[i]='i/j'

	#-----------------End(2)-----------------#

	# -------- substitution part (3)---------- 
	ciphertext=""

	for i in range(0,len(plaintext)-1,2):

		ele1=np.where(x==plaintext[i])
		ele2=np.where(x==plaintext[i+1])
		if ele1[0] == ele2[0]:
			
			ciphertext+= x[int(ele1[0])][int((ele1[1]+1)%5)]+\
		   				x[int(ele2[0])] [int((ele2[1]+1)%5)]
		elif ele1[1] == ele2 [1]:
			ciphertext+= x[int((ele1[0]+1)%5)][int(ele1[1])]+\
		   				x [int((ele2[0]+1)%5)][int(ele2[1])]
		else:
			ciphertext+= x[int(ele1[0])][int(ele2[1])]+\
		   				x[int(ele2[0])][int(ele1[1])]
		#--------------------END(3)--------------------

	
	return ciphertext.replace("i/j",'i')

"""## Vigenere Cipher

"""

def vigenere( plaintext, key, mode):
  n= len(plaintext)
  key_text=""
  if mode  :
    key_text= key+plaintext[:n-len(key)]
  else : 
    key_text=(key* ceil(n/len(key)) )[:n]
  
  ciphertext=""
  for i,j in zip(plaintext,key_text):
    ciphertext+= chr( (ord(i)-97+ord(j)-97)%26+97)
  
  return ciphertext



"""## Vernam Cipher


"""

def vernam(plaintext,key):
  cipher="".join([chr(((ord(i)+ord(j)-194)%26)+97) for i,j in zip(plaintext.lower(),key.lower())])
  return cipher




if __name__ == "__main__":
	caesar_plain=None
	Hill_plain_2x2=None
	Hill_plain_3x3=None
	Playfair_plain=None
	Vernam_plain= None
	Vigenere_plain= None


	with open("Input_Files/Caesar/caesar_plain.txt","r") as f:
		caesar_plain= f.read().split("\n")

	with open("Input_Files/Hill/hill_plain_2x2.txt","r") as f:
		Hill_plain_2x2= f.read().split("\n")

	with open("Input_Files/Hill/hill_plain_3x3.txt","r") as f:
		Hill_plain_3x3= f.read().split("\n")

	with open("Input_Files/PlayFair/playfair_plain.txt","r") as f:
		Playfair_plain= f.read().split("\n")
	with open("Input_Files/Vernam/vernam_plain.txt","r") as f:
		Vername_plain= f.read().split("\n")
	with open("Input_Files/Vigenere/vigenere_plain.txt","r") as f:
		Vigenere_plain= f.read().split("\n")




	# Caesar 
	with open("Input_Files/Caesar/caesar_out.txt","w") as f:
		f.write("\n".join([caesar(inp,key=3) for inp in caesar_plain]))
		f.write("\n")
		f.write("\n".join([caesar(inp,key=6) for inp in caesar_plain]))
		f.write("\n")
		f.write("\n".join([caesar(inp,key=12) for inp in caesar_plain]))



	# Hill 
	with open("Input_Files/Hill/hill_out_2x2.txt","w") as f:
		f.write("\n".join([hill(inp,key_matrix=[[5,17],[8,3]]) for inp in Hill_plain_2x2]))

	with open("Input_Files/Hill/hill_out_3x3.txt","w") as f:
		f.write("\n".join([hill(inp,key_matrix=[[2,4,12],[9,1,6],[7,5,3]]) for inp in Hill_plain_3x3]))



	# playfair

	with open("Input_Files/PlayFair/playfair_out.txt","w") as f:
		f.write("\n".join([playfair(inp,key="rats") for inp in Playfair_plain]))
		f.write("\n\n")
		f.write("\n".join([playfair(inp,key="archangel") for inp in Playfair_plain]))


	# Vigenere


	with open("Input_Files/Vigenere/vigenere_out.txt","w") as f:
		f.write("\n".join([vigenere(inp,key="pie",mode=1) for inp in Vigenere_plain]))
		f.write("\n\n")
		f.write("\n".join([vigenere(inp,key="aether",mode=0) for inp in Vigenere_plain]))


	# Vernam
	with open("Input_Files/Vernam/vernam_out.txt","w") as f:
		f.write("\n".join([ vernam(inp,key="SPRANTS") for inp in Vername_plain]))